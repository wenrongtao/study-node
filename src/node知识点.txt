node不是一门语言也不是框架，它是JavaScript运行环境
node特点：
1.事件驱动
2.非阻塞IO模型（异步）
3.轻量和高效

前端负责用户界面，后端负责提供数据和业务接口

命令：
只用于开发环境: --save-dev
用于生产环境: --save
查看下载的内容：npm list
更新版本：npm update jquery
删除：npm uninstall jquery

文件引入：
var fs = require('fs')
在node中，读写文件也有同步和异步

//同步
fs.readFileSync('文件名', {flag: 'r', encoding: 'utf-8'})

//异步
fs.readFile('文件名',{这里可填可不填}, function (err, data) {})


//1.读文件(封装)

let fs = require('fs')
function fsread(path) {
  return  new Promise (function (resolve, reject) {
    fs.readFile ('path', {flag: 'r', encoding: 'utf-8'}, function (err, data) {
      if (err) {
        reject(err)
      } else {
        resolve (data)
      }
    })
  })
}
//这是读一个文件
var fs1 = fsread('文件名')
fs1.then (function (res) {
  console.log(res)
})
//这是读多个文件，并且按顺序执行
async function readlist () {
  var w1 = await fsread ('')
  var w2 = await fsread ('')
  var w3 = await fsread ('')
  console.log(w1)
}
readlist()


//2.写文件

let fs = require('fs')
fs.writeFile('test.txt', '你好啊！！', {flag: 'w', encoding: 'utf-8'}, function (err) {
  if (err) { } else { }
})
//封装写文件
let fs = require('fs')
function writefiles (path, content) {
  return new Promise(function (resolve, reject) {
    fs.writeFile(path, content, {flag: 'a', encoding: 'utf-8'}, function (err) {
      if (err) {
        reject(err)
      } else {
        reject(err)
      }
    })
  })
}
async function writelist () {
  //写文件不需要返回内容
  await writefiles('1.txt', '今天过得好吗？？/n')
  await writefiles('1.txt', '让我康康？？/n')
  await writefiles('1.txt', '敲代码使我快乐/n')
  await writefiles('1.html', <h1>添加到HTML中</h1>)
}
writelist()


//3.删文件

let fs = require('fs')
fs.unlink('1.txt', function () {
  console.log('删除成功')
})


//4.buffer

//buffer内存空间开辟出固定大小的内存:将字符串转为buffer对象
var str = 'helloworld'
var buf = Buffer.from(str)
console.log(buf.toString())

//开辟一个空的buffer（缓冲区）
let buf1 = Buffer.alloc(10)
buf1[0] = 255
console.log(buf1)


//4.读取目录

let fs = require('fs')
s.readdir('../src', function(err, files) {
  if (err) {
    console.log(err)
  } else {
    files.forEach( async function (filename, i) {

    })
  }
})


//5.node 输入与输出

//导入readline包
//实例化接口对象
let readline = require('readline')
let r1 = readline.createInterface ({
  input: process.stdin,
  output: process.stdout
})
//设置r1提问事件
r1.question('今天心情好么？？'， function (answer) {
  console.log('答复：', answer)
  r1.close()
})
r1.on('close', function () {
  process.exit(0)
})

(这里应该封装一下requestion)
封装函数：
function lcquestion () {
  return new Promise (resolve, reject) {
    r1.question (title, fuction (answer) {
      resolve (answer)
    })
  }
}
async function  createpac () {
  let info1 = await lcquestion ('今天出去玩么？')
  let info2 = await lcquestion ('大家今天心情如何？')
}
createpac()


//6.文件流

let fs = require('fs')
//创建写入流
let ws = fs.createWriteStream('hello.txt', {flag: 'w', encoding: 'utf-8'})
ws.on('open', function ()) {
  console.log('文件打开')
}
ws.on('close', function ()) {
  console.log('文件完成，关闭')
}
ws.write('helloworld', function (err) {
  if (err) {
    console.log(err)
  } else {
    console.log('文件写入完成')
  }
})
ws.end(function() {
  console.log('文件写入关闭)
})


//7.node事件
node是单进程单线程应用程序


//8.路径模块
let path = require('path')
let strpath = 'main.js'
let info = path.extname(strpath)
console.log(info)//输出.js

let arr = ['/stt', 'qianduan', 'wrt']
let info1 = path.resolve(...arr)//这里必须是解构，结果是拼接成/stt/qianduan/wrt


//9.爬取数据
终端：npm i axios
let axios = require('axios')
let url = 'http://www.tmall.com'
axios.get(url).then(function (res) {
  console.log(res)
})

终端：npm i request
let request = require('request')
request.get(url, function (res) {

})


//10.抓取表情包
cheerio是node的抓取页面模块，适合各种web爬虫程序
安装 cnpm install cheerio
var axios = require('axios')
var cheerio = require('cheerio')
axios.get('www.baidu.com').then((res)=> {
  //cheerio解析html文档
  let $ = cheerio.load(res.data)
  $('#home').each((index, value)=> {
    $(value).attr('href')
  })
})

async funtion parsePage (url) {
  let res = await axios.get(url)
  let $ = cheerio.load(res.data)
}
parsePage('')



//爬取音乐
async function download(url,title) {
  axios.get('url', {responseType: 'stream'}).then(function (res) {
    var ws = fs.createWriteStream('imageURL'+title+'.mp3')
    res.data.pipe(ws)
    res.data.on('close', function () {
      ws.close()
    })
  })
}


//puppeteer是一个node库,具体看官方文档
下载npm install puppeteer
let puppeteer = require('puppeteer')
saync function test() {
  //puppeteer.lauch实例开启浏览器，
  //可以传入option对象，可以配置为无界面浏览器，可以配置为有界面浏览器
  //无界面浏览器性能更高更快，有界面一般用于调试
  let options = {
    //设置视窗宽高
    defaultViewport: {
      width: 1400,
      height: 800
    },
    //设置为有界面，如果为true，表示无界面
    headless: false
  }
  let browser = await puppeteer.lauch(options)
  //打开页面
  let page = await browser.newPage()
  //访问页面
  await page.goto("http://www.baidu.com")
  //截屏
  await page.screenshot({path:'screenshot.png'})
  //获取页面内容
  page.$$eval("#menu li a",(elements)=> {
    console.log(elements)
  })
  //浏览器可以监听控制台的输出
  page.on('console', function (eventMSG) {
    console.log(eventMSG.text())
  })
}


//
